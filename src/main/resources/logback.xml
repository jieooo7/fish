<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <logger name="org.springframework.web" level="DEBUG"/>
    <property name="LOG_HOME" value="/home/thy/www/logs"/>
    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--&lt;!&ndash; encoder 默认配置为PatternLayoutEncoder &ndash;&gt;-->

        <!--<encoder>-->
            <!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n-->
            <!--</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->


    <appender name="dailyRollingFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<File>${LOG_HOME}/springboot.log</File>-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- daily rollover -->
            <FileNamePattern>${LOG_HOME}/spring.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!-- keep 30 days' worth of history -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <Pattern>%d{yyyy-MM-dd --HH:mm:ss.SSS} [%thread] %-5level %logger{35} - %msg %n</Pattern>
        </encoder>
    </appender>


    <!-- * 通配符 设置log打印级别 对所有类有效TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF-->
    <root level="debug">
        <!--<appender-ref ref="STDOUT" />-->
        <appender-ref ref="dailyRollingFileAppender" />
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>
</configuration>


    <!--%d{HH:mm:ss.SSS}——日志输出时间-->
    <!--%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用-->
    <!--%-5level——日志级别，并且使用5个字符靠左对齐-->
    <!--%logger{36}——日志输出者的名字-->
    <!--%msg——日志消息-->
    <!--%n——平台的换行符-->

    <!--TRACE < DEBUG < INFO < WARN < ERROR。默认级别为DEBUG-->
    <!--ERROR：发生了严重的错误，必须马上处理。这种级别的错误是任何系统都无法容忍的。比如：空指针异常，数据库不可用，关键路径的用例无法继续执行。-->
    <!--WARN：还会继续执行后面的流程，但应该引起重视。其实在这里我希望有两种级别：一个是存在解决方案的明显的问题（比如，”当前数据不可用，使用缓存数据”），另一
    个是潜在的问题和建议比如“程序运行在开发模式下”或者“管理控制台的密码不够安全”）。应用程序可以容忍这些信息，不过它们应该被检查及修复。-->
    <!--INFO:消息在粗粒度级别上突出强调应用程序的运行过程。最好能打印些人类可读的信息，需要谨慎对待，不可随便。-->
    <!--DEBUG：开发人员调试程序的时候需要的关注的事情。-->
    <!--TRACE：更为详尽的信息，只是开发阶段使用。在产品上线之后的一小段时间内你可能还需要关注下这些信息，不过这些日志记录只是临时性的，
    最终应该关掉。DEBUG和TRACE的区别很难区分，不过如果你加了一行日志，在开发测试完后又删了它的话，这条日志就应该是TRACE级别的。-->
    <!--通过定义级别，您可以控制到应用程序中相应级别的日志信息的开关。比如定义了INFO级别， 则应用程序中所有DEBUG级别的日志信息将不被打
    印出来。程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。如果设置级别为INFO，则优先级高于等于INFO级别（
    如：INFO、 WARN、ERROR）的日志信息将可以被输出,小于该级别的如DEBUG将不会被输出。-->