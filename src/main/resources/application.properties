multipart.maxFileSize: 2048KB
multipart.maxRequestSize: 1024KB

spring.devtools.remote.secret=1234
spring.devtools.remote.debug.enabled=true
spring.devtools.remote.debug.local-port=8000

spring.devtools.restart.enabled=true
spring.devtools.restart.exclude=static/**
#spring.devtools.restart.include=/templates/**

spring.datasource.url=jdbc:mysql://localhost/fish?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=1234qwer
#1234qwerASDF!@#$
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#开启对sql语句的打印
spring.jpa.properties.hibernate.show_sql=true

#指定缓存配置文件
#spring.cache.ehcache.config=classpath:config/another-config.xml


#JPA Configuration:
#显示自动创建表的SQL语句
#spring.jpa.show-sql=true
#DDL是SQL语言的四大功能之一。
#用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束
#spring.jpa.generate-ddl=true # Initialize the schema on startup. but it is not used if Hibernate autoconfig is active because the ddl-auto settings are more fine-grained.
#spring.jpa.hibernate.ddl-auto=update # 如果有这个则上一行没用，这个控制的粒度更细

#四种类型
#validate: validate the schema, makes no changes to the database.
#update: update the schema.
#create: creates the schema, destroying previous data.
#create-drop: drop the schema at the end of the session

#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。


#spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
# Number of ms to wait before throwing an exception if no connection is available.
#spring.datasource.tomcat.max-wait=10000

# Maximum number of active connections that can be allocated from this pool at the same time.
#spring.datasource.tomcat.max-active=50

# Validate the connection before borrowing it from the pool.
#spring.datasource.tomcat.test-on-borrow=true

#spring.jpa.database=mysql
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

server.port=8080
#该配置将指示tomcat从HTTP头信息中去获取协议信息（而非从HttpServletRequest中获取），同时，如果你的应用还用到了spring-security则也无需再配置。
#server.tomcat.remote_ip_header=x-forwarded-for
#server.tomcat.protocol_header=x-forwarded-proto
#server.tomcat.port-header=X-Forwarded-Port

#server.use-forward-headers=true

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=1234redis
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0

#backlog setting
#logging.config=logback.xml
#logging.file=/home/thy/www/springboot.log


#spring.ue.config=config.json
#开启thymeleaf
spring.thymeleaf.enabled=true
spring.thymeleaf.cache=false
# THYMELEAF (ThymeleafAutoConfiguration)
#spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.excluded-view-names= # comma-separated list of view names that should be excluded from resolution
#spring.thymeleaf.view-names= # comma-separated list of view names that can be resolved
spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html # ;charset=<encoding> is added


#上传文件大小
spring.http.multipart.max-file-size=500MB
spring.http.multipart.max-request-size=20MB

#com.didispace.blog.name=fffffDD
#com.didispace.blog.title=Spring Bootfff




#1.读取核心配置文件信息application.properties的内容
#
#在config中注入：
#
#@Autowired
#private Environment env;
#
#通过application.properties的key读取value：
#env.getProperty(key)
#
#2.读取自定义配置文件信息，例如：redis.properties
#
#在configuration类上面使用注解：
#
#@ConfigurationProperties(prefix = "spring.db_items",locations = "classpath:config/db.properties")
#
#参数：
#1.prefix指的是前缀名称，例如spring.db_items.className 表示的是前面的名称
#
#2.locations指的是自定义的配置文件的位置


#//当前日期
#Date date = new Date();
#//格式化并转换String类型
#String path="E:/"+new SimpleDateFormat("yyyy/MM/dd").format(date);
#//创建文件夹
#File f = new File(path);
#if(!f.exists())
#f.mkdirs();


# HTTP encoding (HttpEncodingProperties)
spring.http.encoding.charset=UTF-8
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.enabled=true
# Enable http encoding support.
#spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.
#spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when "force" has not been specified.
#spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.
# MULTIPART (MultipartProperties)
#spring.http.multipart.enabled=true # Enable support of multi-part uploads.
#spring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
#spring.http.multipart.location= # Intermediate location of uploaded files.
#spring.http.multipart.max-file-size=1Mb # Max file size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
#spring.http.multipart.max-request-size=10Mb # Max request size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
#spring.http.multipart.resolve-lazily=false # Whether to resolve the multipart request lazily at the time of file or parameter access.